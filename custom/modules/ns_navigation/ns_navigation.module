<?php

/**
 * @file
 * Contains ns_navigation.module.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_theme().
 */
function ns_navigation_theme($existing, $type, $theme, $path) {
  return [
    'ns_intro' => [
      'variables' => [],
    ],
    'ns_about' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function ns_navigation_views_pre_render($view) {

  if ($view->id() == "authors_for" && $view->current_display == 'page_1') {
    $usr = \Drupal::currentUser()->id();
    $ses = \Drupal::service('session_manager')->getId();
    $current_ref = 'current_ref' . $usr . $ses;

    if (\Drupal::state()->get($current_ref)) {
      \Drupal::state()->delete($current_ref);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function ns_navigation_bibcite_reference_load($entities) {
  if (count($entities) == 1) {
    $ref_id = key($entities);
    $usr = \Drupal::currentUser()->id();
    $ses = \Drupal::service('session_manager')->getId();
    $current_ref = 'current_ref' . $usr . $ses;
    \Drupal::state()->set($current_ref, $ref_id);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ns_navigation_form_bibcite_contributor_delete_form_alter(&$form, $form_state, $form_id) {

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) &&
    $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'del_contrib_redir';
    }
  }

  unset($form['actions']['cancel']);

  $form['cust_cancel'] = [
    '#id' => 'custom-cancel',
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#weight' => 100,
    '#submit' => ['del_contrib_redir'],
  ];

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ns_navigation_form_bibcite_contributor_edit_form_alter(&$form, $form_state, $form_id) {
  $form['cust_cancel'] = [
    '#id' => 'custom-cancel',
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#weight' => 100,
    '#submit' => ['del_contrib_redir'],
  ];
}

/**
 * Implements hook_FORM_alter().
 */
function ns_navigation_form_alter(&$form, &$form_state, $form_id) {

  if (preg_match('/bibcite_reference_(.*)_edit_form/', $form_id)) {
    $ref_id = $form_state->getBuildInfo()['callback_object']->getEntity()->id();

    $form['to_authors'] = [
      '#type' => 'submit',
      '#value' => t('Edit Authors'),
      '#submit' => ['ref_edit_authors'],
    ];

    $form['ref_id'] = [
      '#type' => 'value',
      '#value' => $ref_id,
    ];
  }

  if (preg_match('/bibcite_reference_(.*)_delete_form/', $form_id)) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) &&
      $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'del_ref_redir';
      }
    }

    unset($form['actions']['cancel']);

    $form['cust_cancel'] = [
      '#id' => 'custom-cancel',
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#weight' => 100,
      '#submit' => ['del_ref_cancel_redir'],
    ];
  }

  if (array_key_exists('text_keyword__value', $form) && $form_id == "views_exposed_form") {

    $types = [];

    if (array_key_exists('type', $form)) {
      $types = $form['type']['#options'];
    }

    foreach (array_slice($types, 1) as $type) {

      $bib_type = array_search($type, $types);

      $query = \Drupal::entityQuery('bibcite_reference')
        ->condition('type', $bib_type)
        ->execute();

      if (!$query) {
        unset($types[$bib_type]);
      }
    }

    $form['type']['#options'] = $types;
  }

}

/**
 * Handles edit-authors.
 */
function ref_edit_authors(&$form, &$form_state) {
  $ref_id = $form_state->getValue('ref_id');
  $response = new RedirectResponse('/authors-for/' . $ref_id);
  $response->send();
}

/**
 * Handles delete-contributor redirection.
 */
function del_contrib_redir(&$form, &$form_state) {
  $usr = \Drupal::currentUser()->id();
  $ses = \Drupal::service('session_manager')->getId();
  $current_ref = 'current_ref' . $usr . $ses;

  $ref_id = \Drupal::state()->get($current_ref) ?
  \Drupal::state()->get($current_ref) : "";

  if ($ref_id) {
    $response = new RedirectResponse('/authors-for/' . $ref_id);
    $response->send();
  }
  else {
    $response = new RedirectResponse('/authors/');
    $response->send();
  }
}

/**
 * Handles delete-contributor redirection.
 */
function del_ref_redir(&$form, &$form_state) {
  $response = new RedirectResponse('/references-advanced/');
  $response->send();
}

/**
 * Handles delete-contributor redirection on cancel.
 */
function del_ref_cancel_redir(&$form, &$form_state) {
  $usr = \Drupal::currentUser()->id();
  $ses = \Drupal::service('session_manager')->getId();
  $current_ref = 'current_ref' . $usr . $ses;

  $ref_id = \Drupal::state()->get($current_ref) ?
  \Drupal::state()->get($current_ref) : "";

  $response = new RedirectResponse('/bibcite/reference/' . $ref_id);
  $response->send();
}
