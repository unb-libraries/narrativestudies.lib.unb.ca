<?php

/**
 * @file
 * Contains ns_navigation.module.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_theme().
 */
function ns_navigation_theme($existing, $type, $theme, $path) {
  return [
    'ns_intro' => [
      'variables' => [],
    ],
    'ns_about' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_FORM_alter().
 */
function ns_navigation_form_alter(&$form, &$form_state, $form_id) {

  if (preg_match('/bibcite_reference_(.*)_edit_form/', $form_id)) {
    $ref_id = $form_state->getBuildInfo()['callback_object']->getEntity()->id();

    $form['to_authors'] = [
      '#type' => 'submit',
      '#value' => t('Edit Authors'),
      '#submit' => ['ref_edit_authors'],
    ];

    $form['ref_id'] = [
      '#type' => 'value',
      '#value' => $ref_id,
    ];
  }

  if ($form_id == 'bibcite_contributor_delete_form') {
    $form['contrib_cancel_del'] = [
      '#type' => 'submit',
      '#weight' => 999,
      '#value' => t('Cancel'),
      '#submit' => ['contrib_cancel_del'],
      '#limit_validation_errors' => [],
    ];

  }

  if (preg_match('/bibcite_reference_(.*)_delete_form/', $form_id)) {
    $form['reference_cancel_del'] = [
      '#type' => 'submit',
      '#weight' => 999,
      '#value' => t('Cancel'),
      '#submit' => ['reference_cancel_del'],
      '#limit_validation_errors' => [],
    ];

  }

  if (array_key_exists('text_keyword__value', $form) && $form_id == "views_exposed_form") {

    $types = [];

    if (array_key_exists('type', $form)) {
      $types = $form['type']['#options'];
    }

    foreach (array_slice($types, 1) as $type) {

      $bib_type = array_search($type, $types);

      $query = \Drupal::entityQuery('bibcite_reference')
        ->condition('type', $bib_type)
        ->execute();

      if (!$query) {
        unset($types[$bib_type]);
      }
    }

    $form['type']['#options'] = $types;
  }

}

/**
 * Handles edit-authors.
 */
function ref_edit_authors(&$form, &$form_state) {
  $ref_id = $form_state->getValue('ref_id');
  $response = new RedirectResponse('/authors/' . $ref_id);
  $response->send();
}

/**
 * Handles cancel-redirect for delete contributor.
 */
function contrib_cancel_del(&$form, &$form_state) {
  $response = new RedirectResponse('/authors/');
  $response->send();
}

/**
 * Handles cancel-redirect for delete reference.
 */
function reference_cancel_del(&$form, &$form_state) {
  $response = new RedirectResponse('/references-advanced/');
  $response->send();
}
